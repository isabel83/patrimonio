<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>Plantillas</groupId>
    <artifactId>Plantillas</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>war</packaging>
    <properties>
        <gwtVersion>2.3.0</gwtVersion>
        <org.springframework.version>3.0.5.RELEASE</org.springframework.version>
        <!-- GWT needs at least java 1.5 -->
        <maven.compiler.source>1.6</maven.compiler.source>
        <maven.compiler.target>1.6</maven.compiler.target>
    </properties>
    <dependencies>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-servlet</artifactId>
            <version>${gwtVersion}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-user</artifactId>
            <version>${gwtVersion}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-dev</artifactId>
            <version>${gwtVersion}</version>
            <scope>test</scope>
        </dependency>
		<dependency>
			<groupId>com.allen-sauer.gwt.log</groupId>
			<artifactId>gwt-log</artifactId>
			<version>3.1.3</version>
		</dependency>
        <!-- Core utilities used by other modules. Define this if you use Spring Utility APIs (org.springframework.core.*/org.springframework.util.*) -->
        <!-- Expression Language (depends on spring-core) Define this if you use Spring Expression APIs (org.springframework.expression.*) -->
        <!-- Bean Factory and JavaBeans utilities (depends on spring-core) Define this if you use Spring Bean APIs (org.springframework.beans.*) -->
        <!-- Aspect Oriented Programming (AOP) Framework (depends on spring-core, spring-beans) Define this if you use Spring AOP APIs (org.springframework.aop.*) -->
        <!-- Application Context (depends on spring-core, spring-expression, spring-aop, spring-beans) This is the central artifact for Spring's Dependency Injection Container and is generally always defined -->
        <!-- Various Application Context utilities, including EhCache, JavaMail, Quartz, and Freemarker integration Define this if you need any of these integrations -->
        <!-- Transaction Management Abstraction (depends on spring-core, spring-beans, spring-aop, spring-context) Define this if you use Spring Transactions or DAO Exception Hierarchy (org.springframework.transaction.*/org.springframework.dao.*) -->
        <!-- JDBC Data Access Library (depends on spring-core, spring-beans, spring-context, spring-tx) Define this if you use Spring's JdbcTemplate API (org.springframework.jdbc.*) -->
        <!-- Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA, and iBatis. (depends on spring-core, spring-beans, spring-context, spring-tx) Define this if you need ORM (org.springframework.orm.*) -->
        <!-- Object-to-XML Mapping (OXM) abstraction and integration with JAXB, JiBX, Castor, XStream, and XML Beans. (depends on spring-core, spring-beans, spring-context) Define this if you need OXM (org.springframework.oxm.*) -->
        <!-- Web application development utilities applicable to both Servlet and Portlet Environments (depends on spring-core, spring-beans, spring-context) Define this if you use Spring MVC, or wish to use Struts, JSF, or another web framework with Spring
        (org.springframework.web.*) -->
        <!-- Spring MVC for Servlet Environments (depends on spring-core, spring-beans, spring-context, spring-web) Define this if you use Spring MVC with a Servlet Container such as Apache Tomcat (org.springframework.web.servlet.*) -->
        <!-- Spring MVC for Portlet Environments (depends on spring-core, spring-beans, spring-context, spring-web) Define this if you use Spring MVC with a Portlet Container (org.springframework.web.portlet.*) -->
        <!-- Support for testing Spring applications with tools such as JUnit and TestNG This artifact is generally always defined with a 'test' scope for the integration testing framework and unit testing stubs -->
        <!-- Utilidad para trabajar de forma transparente con los servicios de spring en GWT Esta utilidad la tuvimos que instalar manualmente en el repositorio de maven mvn install:install-file -Dfile=spring4gwt-0.0.1.jar -DgroupId=code.google.com -DartifactId=spring4gwt
        -Dversion=0.0.1 -Dpackaging=jar -DgeneratePom=true -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.16</version>
            <scope>compile</scope>
        </dependency>
        <!-- Oracle driver -->
        <dependency>
            <groupId>com.oracle</groupId>
            <artifactId>ojdbc14</artifactId>
            <version>10.2.0</version>
        </dependency>
        <!-- Hibernate 3 -->
        
        <!-- Necesario para Hibernate, ya que pide una clase cuando inicializa la app y sino la tiene pincha. Es por eso que se tiene q bajar esta dependencia extra a SLF4J -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.5.8</version>
        </dependency>
        <!-- Necesario para algunas anotaciones como el @PostConstruct -->
        <!-- <dependency> -->
        <!-- <groupId>javaee</groupId> -->
        <!-- <artifactId>javaee-api</artifactId> -->
        <!-- <version>5</version> -->
        <!-- </dependency> -->
        <!-- SPRING SECURITY -->
        <!-- standard.jar para los tags en las JSPs -->
        <!-- JSTL para los tags en las JSPs -->
        <dependency>
        	<groupId>org.hibernate</groupId>
        	<artifactId>hibernate-annotations</artifactId>
        	<version>3.5.6-Final</version>
        </dependency>
        <dependency>
        	<groupId>org.springframework</groupId>
        	<artifactId>spring</artifactId>
        	<version>2.5.6.SEC03</version>
        </dependency>
        <dependency>
        	<groupId>org.springframework.security</groupId>
        	<artifactId>spring-security-web</artifactId>
        	<version>3.1.4.RELEASE</version>
        </dependency>
        <dependency>
        	<groupId>org.springframework.security</groupId>
        	<artifactId>spring-security-core</artifactId>
        	<version>3.1.4.RELEASE</version>
        </dependency>
        <dependency>
        	<groupId>org.hibernate</groupId>
        	<artifactId>
        		hibernate-validator-annotation-processor
        	</artifactId>
        	<version>5.0.1.Final</version>
        </dependency>
        <dependency>
        	<groupId>org.hibernate</groupId>
        	<artifactId>hibernate-validator</artifactId>
        	<version>5.0.1.Final</version>
        </dependency>
        <dependency>
        	<groupId>org.springframework</groupId>
        	<artifactId>spring-asm</artifactId>
        	<version>3.1.4.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>code.google.com</groupId>
            <artifactId>spring4gwt</artifactId>
            <version>0.0.1</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
        	<groupId>junit</groupId>
        	<artifactId>junit</artifactId>
        	<version>4.11</version>
        </dependency>
        <dependency>
        	<groupId>javassist</groupId>
        	<artifactId>javassist</artifactId>
        	<version>3.12.1.GA</version>
        </dependency>
    </dependencies>
    <build>
        <outputDirectory>war/WEB-INF/classes</outputDirectory>
        <sourceDirectory>src</sourceDirectory>
        <testSourceDirectory>test</testSourceDirectory>
        <resources>
            <resource>
                <directory>src</directory>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>gwt-maven-plugin</artifactId>
                <version>2.5.1</version>
                <dependencies>
                    <!-- En caso que se utilice una version de ls SDK de GWT diferente a la que soporta este plugin (2.4.0) agregamos estas dos dependencias -->
                    <dependency>
                        <groupId>com.google.gwt</groupId>
                        <artifactId>gwt-user</artifactId>
                        <version>${gwtVersion}</version>
                    </dependency>
                    <dependency>
                        <groupId>com.google.gwt</groupId>
                        <artifactId>gwt-dev</artifactId>
                        <version>${gwtVersion}</version>
                    </dependency>
                </dependencies>
                <!-- JS is only needed in the package phase, this speeds up testing -->
                <!-- Esto ejecutara la compilarcion de JavaScript solo a partir de la fase de prepare-package en adelante (mvn package o install) o bien, ejecutando de el mvn gwt:compile (pero este ultimo no te compilara las clases, solo te compilara a JS) Por eso es
                recomendabel tirar los dos compandos mvn compile gwt:compile o bien tirar directamente mvn package-->
                <executions>
                    <execution>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>compile</goal>
                            <!--<goal>generateAsync</goal>-->
                      		<goal>test</goal>
                        </goals>
                    </execution>
                </executions>
                <!-- Plugin configuration. There are many available options, see gwt-maven-plugin documentation at codehaus.org -->
                <configuration>
                    <!-- URL that should be automatically opened in the GWT shell (gwt:run). -->
                    <runTarget>Plantillas.html</runTarget>
                    <!-- Location of the develop-mode web application structure (gwt:run). -->
                    <!--hostedWebapp>target/www</hostedWebapp-->
                    <hostedWebapp>${project.build.directory}/${project.build.finalName}</hostedWebapp>
                    <!-- Ask GWT to create the Story of Your Compile (SOYC) (gwt:compile) -->
                    <soyc>true</soyc>
                </configuration>
            </plugin>
            <!-- Copy static web files before executing gwt:run Este se ejecutara cuando se corra el comando mvn compile o mvn package o mvn install. Esto te permite agregar al www los recursos estaticos como ser css y html. -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.5</version>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <!--outputDirectory>target/www</outputDirectory-->
                            <outputDirectory>${project.build.directory}/${project.build.finalName}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/webapp</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Mark the project for Google Plugin for Eclipse (GPE) The Eclipse Plugin is used to generate Eclipse IDE files (*.classpath, *.wtpmodules and the .settings folder) for use with a project. -->
            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.8</version>
                <configuration>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                    <wtpversion>2.0</wtpversion>
                </configuration>
            </plugin>
            <!-- Cargo deployment plugin Este plugin te permite deployar la app en un tomcat y levantar el web server. Esto se ejecutara en la fase de install (cuando corramos el comnado mvn install)-->
            <plugin>
                <groupId>org.codehaus.cargo</groupId>
                <artifactId>cargo-maven2-plugin</artifactId>
                <version>1.4.0</version>
                <configuration>
                    <!-- When Cargo starts the container, the following tag instructs it to wait for you to kill the session with Crtl-C-->
                    <wait>true</wait>
                    <!-- The following tag details the container you want to deploy to. -->
                    <container>
                        <containerId>tomcat7x</containerId>
                        <!-- Type==I nstalled means that you want to deploy to a container that's installed on your local computer Type==R emote means that yoy want to deploy to a container that's installed on remote pc.-->
                        <type>installed</type>
                        <home>C:\servers\apache-tomcat-7.0.8</home>
                        <!-- timeout>180000</timeout-->
                    </container>
                    <configuration>
                        <!-- You have to now specify another configuration with type==e xisting and re-issue the home path -->
                        <type>existing</type>
                        <home>C:\servers\apache-tomcat-7.0.8</home>
                        <properties>
                            <!-- Esto es util si levantamos el tomcat en otro puerto que no sea el 8080 -->
                            <cargo.host>localhost</cargo.host>
                            <cargo.servlet.port>8081</cargo.servlet.port>
                        </properties>
                    </configuration>
                    <deployer>
                        <!-- You have to again specify that the type for the deployer Type is set to be consistent with the container -->
                        <type>installed</type>
                        <deployables>
                            <!-- This deployable specifies the webapp you want to deploy -->
                            <deployable>
                                <groupId>com.patrimonio.plantillas</groupId>
                                <artifactId>Plantillas</artifactId>
                                <type>war</type>
                                <!-- If you want to redefine the name of Web application settings , In most cases you will define this property -->
                                <!--properties>
                               <context>${project.build.finalName}</context>
                            </properties-->
                            </deployable>
                        </deployables>
                    </deployer>
                </configuration>
                <executions>
                    <!-- Executions specify the targets that you want to run during build -->
                    <!-- Maven has the concept of a 'phase' which can be thought of a collection of goals. Hence here we are specifying that during the 'install' phase first deploy the webapp to the container specific folder and then start the container. Both 'deployer-deploy'
                    and 'start' are cargo specific goals. -->
                    <execution>
                        <id>verify-deploy</id>
                        <phase>install</phase>
                        <goals>
                            <goal>deployer-deploy</goal>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <!-- Specifying that during the 'pre-clean' phase, Cargo should first stop the container. -->
                    <!-- execution>
                                        <id>clean-undeploy</id>
                                        <phase>pre-clean</phase>
                                        <goals>
                                                <goal>stop</goal>
                                        </goals>
                                </execution-->
                </executions>
            </plugin>
            <!-- Add source folders to test classpath in order to run gwt-tests as normal junit-tests -->
            <!-- plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                  <additionalClasspathElements>
                    <additionalClasspathElement>${project.build.sourceDirectory}</additionalClasspathElement>
                    <additionalClasspathElement>${project.build.testSourceDirectory}</additionalClasspathElement>
                  </additionalClasspathElements>
                  <useManifestOnlyJar>false</useManifestOnlyJar>
                  <forkMode>always</forkMode -->
            <!-- Folder for generated testing stuff -->
            <!-- systemProperties>
                    <property>
                      <name>gwt.args</name>
                      <value>-out target/www</value>
                    </property>
                  </systemProperties>
                </configuration>
              </plugin -->
            <!-- Copia las librerias al WEB-INF/lib -->
            <!-- mvn dependency:copy-dependencies -->
            <!-- Esto viene a colacion de un error que lanzaba a la hora de desplegar la app que decia que estaba mal el applicationContext ya que no encontraba las librerias de TX -->
            <!-- plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>2.1</version>
                        <configuration>
                                <outputDirectory>${webInfLibPath}</outputDirectory>
                                <excludeGroupIds>${pom.groupId}</excludeGroupIds>
                                <excludeScope>provided</excludeScope>
                        </configuration>
          </plugin-->
            <!-- plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.0</version>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin-->
        </plugins>
    </build>
</project>